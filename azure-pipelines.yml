# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pool:
  vmImage: 'ubuntu-latest'

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install Node.js'

  - script: |
      git config --global user.email 'azure@dxc.com'
      git config --global user.name 'Azure User'
      git checkout -b $(Build.SourceBranchName)
      git reset --hard origin/$(Build.SourceBranchName)
      git pull origin $(Build.SourceBranchName)
    displayName: 'Pulling content'
    condition: and(ne(variables['RELEASE_OPTION'], 'no-release'), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))

  - script: |
      cd lib
      npm version major
    displayName: 'Major release'
    condition: and(eq(variables['RELEASE_OPTION'], 'major'), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))

  - script: |
      cd lib
      npm version minor
    displayName: 'Minor release'
    condition: and(eq(variables['RELEASE_OPTION'], 'minor'), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))

  - script: |
      cd lib
      npm version patch
    displayName: 'Patch release'
    condition: and(eq(variables['RELEASE_OPTION'], 'patch'), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))

  - script: |
      cd lib
      npm version premajor --preid=$(PRERELEASE_TYPE)
    displayName: 'Premajor release'
    condition: and(eq(variables['RELEASE_OPTION'], 'premajor'), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))
  
  - script: |
      cd lib
      npm version preminor --preid=$(PRERELEASE_TYPE)
    displayName: 'Preminor release'
    condition: and(eq(variables['RELEASE_OPTION'], 'preminor'), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))

  - script: |
      cd lib
      npm version prepatch --preid=$(PRERELEASE_TYPE)
    displayName: 'Prepatch release'
    condition: and(eq(variables['RELEASE_OPTION'], 'prepatch'), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))

  - script: |
      cd lib
      npm version prerelease --preid=$(PRERELEASE_TYPE)
    displayName: 'Prerelease release'
    condition: and(eq(variables['RELEASE_OPTION'], 'prerelease'), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))

  - script: |
      cd lib
      npm install
    displayName: 'Install dependencies'

  - script: |
      cd lib
      npm run build
    displayName: 'Build library'

  - script: |
      cd lib
      echo "Add the tests here"
    displayName: 'Test library'

  - script: |
      cd lib
      sed -i -e 's/<TOKEN>/'$(NPM_TOKEN)'/g' .npmrc
      cp .npmrc ./dist
    displayName: '.npmrc file'

  - script: |
      cd lib/dist
      OLD_RELEASE_NUMBER=$(grep 'version' package.json | grep -o '[0-9.].*[^\",]')
      sed -i -e 's/'$OLD_RELEASE_NUMBER/$OLD_RELEASE_NUMBER-alpha.$(Build.BuildNumber)'/g' package.json
    displayName: 'Alpha version library'
    condition: and(eq(variables['RELEASE_OPTION'], 'no-release'), eq(variables['Build.SourceBranchName'], 'master'))
  
  - script: |
      RELEASE_NUMBER=$(grep 'version' lib/dist/package.json | grep -o '[0-9.].*[^\",]')
      git add lib/package.json
      git commit -m 'New release!'
      git tag $RELEASE_NUMBER
      git push https://$(GITHUB_TOKEN)@github.com/dxc-technology/dxc-halstack-client.git $(Build.SourceBranchName)
      git push https://$(GITHUB_TOKEN)@github.com/dxc-technology/dxc-halstack-client.git --tags
    displayName: 'Pushing updated package.json'
    condition: and(ne(variables['RELEASE_OPTION'], 'no-release'), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))

  - task: Npm@1
    inputs:
      command: 'custom' # Options: install, publish, custom
      workingDir: 'lib/dist'
      verbose: true
      customCommand: 'publish --tag alpha'
      customRegistry: 'useNpmrc'
      publishEndpoint: 'NpmJs'
    condition: and(eq(variables['RELEASE_OPTION'], 'no-release'), eq(variables['Build.SourceBranchName'], 'master'))

  - task: Npm@1
    inputs:
      command: 'custom' # Options: install, publish, custom
      workingDir: 'lib/dist'
      verbose: true
      customCommand: 'publish --tag $(PRERELEASE_TYPE)'
      customRegistry: 'useNpmrc'
      publishEndpoint: 'NpmJs'
    condition: and(or(eq(variables['RELEASE_OPTION'], 'premajor'), eq(variables['RELEASE_OPTION'], 'preminor'), eq(variables['RELEASE_OPTION'], 'prepatch'), eq(variables['RELEASE_OPTION'], 'prerelease')), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))

  - task: Npm@1
    inputs:
      command: 'custom' # Options: install, publish, custom
      workingDir: 'lib/dist'
      verbose: true
      customCommand: 'publish'
      customRegistry: 'useNpmrc'
      publishEndpoint: 'NpmJs'
    condition: and(or(eq(variables['RELEASE_OPTION'], 'major'), eq(variables['RELEASE_OPTION'], 'minor'), eq(variables['RELEASE_OPTION'], 'patch')), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))

  - task: GitHubRelease@0
    inputs:
      gitHubConnection: 'GitHub'
      repositoryName: 'dxc-technology/dxc-halstack-client'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'auto'
      title: '$(RELEASE_NUMBER)'
      releaseNotesSource: 'input'
      releaseNotes: 'Test'
      addChangeLog: false
    condition: and(or(eq(variables['RELEASE_OPTION'], 'major'), eq(variables['RELEASE_OPTION'], 'minor'), eq(variables['RELEASE_OPTION'], 'patch')), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))

  - task: GitHubRelease@0
    inputs:
      gitHubConnection: 'GitHub'
      repositoryName: 'dxc-technology/dxc-halstack-client'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'auto'
      title: '$(RELEASE_NUMBER)'
      releaseNotesSource: 'input'
      releaseNotes: 'Test'
      addChangeLog: false
      isPreRelease: true
    condition: and(or(eq(variables['RELEASE_OPTION'], 'premajor'), eq(variables['RELEASE_OPTION'], 'preminor'), eq(variables['RELEASE_OPTION'], 'prepatch'), eq(variables['RELEASE_OPTION'], 'prerelease')), eq(variables['PASSWORD'], variables['PASSWORD_VERIF']))
